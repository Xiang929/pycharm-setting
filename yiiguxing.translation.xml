<application>
  <component name="AppStorage">
    <histories>
      <item value="is others" />
      <item value="定理" />
      <item value="Theroem" />
      <item value="feature" />
      <item value="match" />
      <item value="readonly" />
      <item value="indices" />
      <item value="instance" />
      <item value="thumbs" />
      <item value="active" />
      <item value="var status_output = get_selected_output(); status_output.innerHTML = &quot;Running&quot;; } function display_checked_proof(result) { var editor = get_selected_editor(); var status_output = get_selected_output(); if (&quot;failed&quot; in result) { status_output.innerHTML = result[&quot;failed&quot;] + &quot;: &quot; + result[&quot;message&quot;] } else { editor.setValue(result[&quot;proof&quot;]); var num_gaps = result[&quot;report&quot;][&quot;num_gaps&quot;]; if (num_gaps &gt; 0) { status_output.innerHTML = &quot;OK. &quot; + num_gaps + &quot; gap(s) remaining.&quot; } else { status_output.innerHTML = &quot;OK. Proof complete!&quot; } } } $(document).ready(function () { $('#theorem-select').ready(function () { $(document).ready(function () { var event = {'event': 'init_theorem'}; var data = JSON.stringify(event); $.ajax({ url: &quot;/api/init&quot;, type: &quot;POST&quot;, data: data, success: function (result) { theorem = result; for (var i in result) { $('#theorem-select').append( $('&lt;option&gt;' + i + '&lt;/option&gt;') ) } $('#theorem-select').selectpicker('refresh'); } }) }); }); $('#add-cell').on('click', function () { // pageNum++; // // Add CodeMirror textarea // id = 'code' + pageNum + '-pan'; // $('#codeTabContent').append( // $('&lt;div class=&quot;code-cell&quot; id=' + id + '&gt;' + // '&lt;label for=&quot;code' + pageNum + '&quot;&gt;&lt;/label&gt; ' + // '&lt;textarea' + ' id=&quot;code' + pageNum + '&quot;&quot;&gt;&lt;/textarea&gt;&lt;/div&gt;')); // init_editor(&quot;code&quot; + pageNum); // // Add location for displaying results // $('#' + id).append( // $('&lt;div class=&quot;output-wrapper&quot;&gt;&lt;div class=&quot;output&quot;&gt;&lt;div class=&quot;output-area&quot;&gt;' + // '&lt;pre&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;')); pageNum++; // Add CodeMirror textarea id = 'code' + pageNum + '-pan'; $('#codeTab').append( $('&lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;nav-link&quot; ' + 'data-toggle=&quot;tab&quot;' + 'href=&quot;#code' + pageNum + '-pan&quot;&gt;' + 'Page ' + pageNum + '&lt;button id=&quot;close_tab&quot; type=&quot;button&quot; ' + 'title=&quot;Remove this page&quot;&gt;×&lt;/button&gt;' + '&lt;/a&gt;&lt;/li&gt;')); let class_name = 'tab-pane fade active newCodeMirror code-cell'; if (pageNum === 1) class_name = 'tab-pane fade in active code-cell'; $('#codeTabContent').append( $('&lt;div class=&quot;' + class_name + '&quot; id=&quot;code' + pageNum + '-pan&quot;&gt;' + '&lt;label for=&quot;code' + pageNum + '&quot;&gt;&lt;/label&gt; ' + '&lt;textarea' + ' id=&quot;code' + pageNum + '&quot;&quot;&gt;&lt;/textarea&gt;')); init_editor(&quot;code&quot; + pageNum); // Add location for displaying results $('#' + id).append( $('&lt;div class=&quot;output-wrapper&quot;&gt;&lt;div class=&quot;output&quot;&gt;&lt;div class=&quot;output-area&quot;&gt;' + '&lt;pre&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;')); $('#codeTab a[href=&quot;#code' + pageNum + '-pan&quot;]').tab('show'); $('.newCodeMirror').each(function () { $(this).removeClass('active') }); }); $('#codeTab').on(&quot;click&quot;, &quot;a&quot;, function (e) { e.preventDefault(); $(this).tab('show'); }); $('#codeTab').on('click', ' li a #close_tab', function () { if ($('#codeTab').children().length === 1) return true; else { var tabId = $(this).parents('li').children('a').attr('href'); var pageNum = $(this).parents('li').children('a').childNodes[0].nodeValue; var first = false; $(this).parents('li').remove('li'); $(tabId).remove(); if (pageNum === &quot;Page 1&quot;) first = true; remove_page(first); $('#codeTab a:first').tab('show'); } }); function remove_page(first) { if (first) pageNum = 0; else pageNum = 1; $('#codeTab &gt; li').each(function () { var pageId = $(this).children('a').attr('href'); if (pageId === &quot;#code1-pan&quot;) { return true; } pageNum++; $(this).children('a').html('Page ' + pageNum + '&lt;button id=&quot;close_tab&quot; type=&quot;button&quot; ' + 'title=&quot;Remove this page&quot;&gt;×&lt;/button&gt;'); }); } $('#delete-cell').on('click', function () { $('.code-cell.selected').remove(); }); $('#introduction').on(&quot;click&quot;, function () { introduction(get_selected_editor()); }); $('#add-line-after').on(&quot;click&quot;, function () { add_line_after(get_selected_editor()); }); $('#apply-backward-step').on(&quot;click&quot;, function () { apply_backward_step(get_selected_editor()); }); $('#apply-induction').on(&quot;click&quot;, function () { apply_induction(get_selected_editor()); }); $('#rewrite-goal').on(&quot;click&quot;, function () { rewrite_goal(get_selected_editor()); }); $('#init-button').on(&quot;click&quot;, function () { let variables_area = document.querySelector('#variables .CodeMirror').CodeMirror; let assumes_area = document.querySelector('#assumes .CodeMirror').CodeMirror; let conclusions_area = document.querySelector('#conclusions .CodeMirror').CodeMirror; var variables = []; var assumes = []; var conclusion = undefined; var reg_blank = /^\s*$/g; variables_area.eachLine(line =&gt; { if (!reg_blank.test(line.text)) { variables.push(line.text) } }); assumes_area.eachLine(line =&gt; { if (!reg_blank.test(line.text)) { assumes.push(line.text) } }); conclusions_area.eachLine(line =&gt; { if (!reg_blank.test(line.text)) { conclusion = line.text } }); $(document).ready(function () { var event = { 'event': 'init_cell', 'id': get_selected_id(), 'variables': variables, 'assumes': assumes, 'conclusion': conclusion }; var data = JSON.stringify(event); $.ajax({ url: &quot;/api/init&quot;, type: &quot;POST&quot;, data: data, success: display_checked_proof }); }); }); $('#add-cell').click(); $('.code-cell').addClass('selected'); init_input_box('variables'); init_input_box('assumes'); init_input_box('conclusions'); get_selected_editor().focus(); document.getElementById('open-file').addEventListener('change', function (e) { e = e || window.event; let files = this.files; let editor = get_selected_editor(); editor.setValue(&quot;&quot;); let i = 0, f; for (; f = files[i]; i++) { let reader = new FileReader(); reader.onload = (function (file) { return function (e) { editor.setValue(editor.getValue() + this.result); }; })(f); reader.readAsText(f); } }); document.getElementById('open-problem').addEventListener('change', function (e) { e = e || window.event; let files = this.files; let i = 0, f; if (files !== '') { for (; f = files[i]; i++) { let reader = new FileReader(); reader.onload = (function () { var json_data = JSON.parse(this.result); var event = { 'event': 'init_cell', 'id': get_selected_id(), 'variables': json_data['variables'], 'assumes': json_data['assumes'], 'conclusion': json_data['conclusion'] }; var data = JSON.stringify(event); display_running(); $.ajax({ url: &quot;/api/init&quot;, type: &quot;POST&quot;, data: data, success: function (result) { display_checked_proof(result); get_selected_editor().focus(); } }); }); reader.readAsText(f); } } $('#open-problem')[0].value = ''; }); document.getElementById('open-json').addEventListener('change', function (e) { e = e || window.event; let files = this.files; let i = 0, f; for (; f = files[i]; i++) { let reader = new FileReader(); reader.onload = (function () { var json_data = JSON.parse(this.result); /*var event = { 'event': 'init_cell', 'id': get_selected_id(), 'variables': json_data['variables'], 'assumes': json_data['assumes'], 'conclusion': json_data['conclusion'] };*/ var data = JSON.stringify(json_data); display_running(); $.ajax({ url: &quot;/api/json&quot;, type: &quot;POST&quot;, datatype: &quot;json&quot;, data: data, success: function (result) { console.log(result); if (result) { //$.each(result, function(i,val){ $('#left').append('&lt;p&gt;' + String(result) + '&lt;/p&gt;'); // }); } } }); }); reader.readAsText(f); } }); document.getElementById(&quot;run-button&quot;).addEventListener('click', send_input); });" />
      <item value="fileds" />
      <item value="liked" />
      <item value="Recommendation" />
      <item value="Recommend" />
      <item value="Recommented" />
      <item value="Email Validator(email)" />
      <item value="Search" />
      <item value="Delete" />
      <item value="cancel" />
      <item value="disable" />
      <item value="feed" />
      <item value="abstract" />
      <item value="init theorem" />
      <item value="States" />
      <item value="assums" />
      <item value="assumes" />
      <item value="variables area" />
      <item value="init state" />
      <item value="variables" />
      <item value="Gaps" />
      <item value="first" />
      <item value="FORALL" />
      <item value="theorem" />
      <item value="theorom" />
      <item value="therom" />
      <item value="init component" />
      <item value="theory" />
      <item value="primitive" />
      <item value="requirements" />
      <item value="entrance" />
      <item value="入口" />
      <item value="entry" />
      <item value="credentials" />
      <item value="username" />
      <item value="存在" />
      <item value="exsits" />
      <item value="password sign up" />
      <item value="Landing Form" />
      <item value="Email Addres" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="65" />
        <entry key="ENGLISH" value="66" />
        <entry key="ESTONIAN" value="1" />
        <entry key="LATIN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Source Code Pro" />
    <option name="primaryFontFamily" value="Consolas" />
  </component>
</application>